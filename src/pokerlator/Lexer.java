package pokerlator;// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: src/pokerlator/Lexer.flex

import compilerTools.Token;


@SuppressWarnings("fallthrough")
class Lexer {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\5\u0100\1\u0300\261\u0100\10\u0400\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\1\1\4\22\0\1\1"+
    "\1\5\1\0\1\6\2\0\1\5\1\7\1\10\1\11"+
    "\1\12\1\0\1\13\1\14\1\0\1\15\1\16\1\17"+
    "\10\20\1\21\1\22\1\5\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\2\30\1\32\2\30\1\33\2\27"+
    "\1\30\1\34\2\30\1\35\1\27\1\36\1\30\1\37"+
    "\6\30\1\40\1\0\1\41\1\0\1\42\1\0\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\51\1\54\1\55\1\56\1\57\1\60\1\61\1\51"+
    "\1\62\1\63\1\64\1\65\1\66\1\51\1\67\1\51"+
    "\1\70\1\71\1\5\1\72\7\0\1\3\73\0\1\42"+
    "\7\0\1\42\3\0\1\42\3\0\1\42\1\0\1\42"+
    "\6\0\1\42\1\0\1\42\4\0\1\42\7\0\1\42"+
    "\3\0\1\42\3\0\1\42\1\0\1\42\6\0\1\42"+
    "\1\0\1\42\u012b\0\2\3\u0136\0\1\73\2\0\1\74"+
    "\1\0\1\75\1\76\231\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1280];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\1\4\1\1\1\5\1\6"+
    "\1\7\2\1\2\10\1\11\1\12\2\1\3\13\1\14"+
    "\1\15\14\1\1\16\1\17\4\1\1\0\1\20\1\0"+
    "\1\21\1\0\1\2\1\22\1\23\1\24\1\25\2\13"+
    "\21\0\1\26\3\0\2\27\1\30\1\27\1\31\1\27"+
    "\1\32\1\27\1\33\1\34\2\0\2\13\30\0\1\2"+
    "\2\13\1\35\1\36\10\0\1\37\1\0\1\40\6\0"+
    "\1\26\3\0\1\41\1\13\3\0\1\42\4\0\1\43"+
    "\5\0\1\44\17\0\1\45\4\0\1\46\1\47\1\27"+
    "\1\0\1\50\1\0\1\51\22\0\1\52\7\0\1\53"+
    "\4\0\1\46";

  private static int [] zzUnpackAction() {
    int [] result = new int[214];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\77\0\77\0\176\0\77\0\77\0\275\0\77"+
    "\0\77\0\77\0\374\0\u013b\0\u017a\0\u01b9\0\77\0\77"+
    "\0\u01f8\0\u0237\0\u0276\0\u02b5\0\u02f4\0\77\0\77\0\u0333"+
    "\0\u0372\0\u03b1\0\u03f0\0\u042f\0\u046e\0\u04ad\0\u04ec\0\u052b"+
    "\0\u056a\0\u05a9\0\u05e8\0\77\0\77\0\u0627\0\u0666\0\u06a5"+
    "\0\u06e4\0\275\0\77\0\u0723\0\77\0\u0762\0\u07a1\0\u017a"+
    "\0\77\0\u07e0\0\u081f\0\u085e\0\u089d\0\u08dc\0\u091b\0\u095a"+
    "\0\u0999\0\u09d8\0\u0a17\0\u0a56\0\u0a95\0\u0ad4\0\u0b13\0\u0b52"+
    "\0\u0b91\0\u0bd0\0\u0c0f\0\u0c4e\0\u0c8d\0\u0ccc\0\u0d0b\0\u0d4a"+
    "\0\u0d89\0\u0dc8\0\77\0\u0e07\0\77\0\u0e46\0\77\0\u0e85"+
    "\0\77\0\u0ec4\0\77\0\77\0\u0f03\0\u0f42\0\u0f81\0\u0fc0"+
    "\0\u0fff\0\u103e\0\u107d\0\u10bc\0\u10fb\0\u113a\0\u1179\0\u11b8"+
    "\0\u11f7\0\u1236\0\u1275\0\u12b4\0\u12f3\0\u1332\0\u1371\0\u13b0"+
    "\0\u13ef\0\u142e\0\u146d\0\u14ac\0\u14eb\0\u152a\0\u1569\0\u15a8"+
    "\0\u0f03\0\u15e7\0\u1626\0\77\0\77\0\u1665\0\u16a4\0\u16e3"+
    "\0\u1722\0\u1761\0\u17a0\0\u17df\0\u181e\0\77\0\u185d\0\77"+
    "\0\u189c\0\u18db\0\u191a\0\u1959\0\u1998\0\u19d7\0\77\0\u1a16"+
    "\0\u1a55\0\u1a94\0\u0276\0\u1ad3\0\u1b12\0\u1b51\0\u1b90\0\77"+
    "\0\u1bcf\0\u1c0e\0\u1c4d\0\u1c8c\0\77\0\u1ccb\0\u1d0a\0\u1d49"+
    "\0\u1d88\0\u1dc7\0\u0276\0\u1e06\0\u1e45\0\u1e84\0\u1ec3\0\u1f02"+
    "\0\u1f41\0\u1f80\0\u1fbf\0\u1ffe\0\u203d\0\u207c\0\u20bb\0\u20fa"+
    "\0\u2139\0\u2178\0\77\0\u21b7\0\u21f6\0\u2235\0\u2274\0\u22b3"+
    "\0\77\0\u22f2\0\u2331\0\77\0\u2370\0\77\0\u23af\0\u23ee"+
    "\0\u242d\0\u246c\0\u24ab\0\u24ea\0\u2529\0\u2568\0\u25a7\0\u25e6"+
    "\0\u2625\0\u2664\0\u26a3\0\u26e2\0\u2721\0\u2760\0\u279f\0\u27de"+
    "\0\77\0\u281d\0\u285c\0\u289b\0\u28da\0\u2919\0\u2958\0\u2997"+
    "\0\77\0\u29d6\0\u2a15\0\u2a54\0\u2a93\0\77";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[214];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\0\1\4\1\5\1\6\1\7\1\10"+
    "\1\11\1\2\1\12\1\13\1\14\1\15\2\16\1\17"+
    "\1\20\1\21\1\5\1\2\1\22\3\23\1\24\1\25"+
    "\4\23\1\26\1\27\2\2\1\30\1\31\1\32\1\2"+
    "\1\33\2\2\1\34\2\2\1\35\1\36\1\2\1\37"+
    "\1\40\1\41\1\42\1\2\1\43\2\2\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\101\0\1\3\75\0\2\52"+
    "\1\0\1\52\2\0\1\53\6\0\3\52\6\0\11\52"+
    "\2\0\27\52\22\0\1\54\7\0\1\55\64\0\1\56"+
    "\2\0\1\57\77\0\3\60\74\0\3\16\102\0\1\61"+
    "\70\0\3\62\6\0\11\63\3\0\26\62\24\0\3\23"+
    "\6\0\11\23\2\0\27\23\24\0\3\23\6\0\11\23"+
    "\2\0\11\23\1\64\15\23\24\0\3\23\6\0\11\23"+
    "\2\0\15\23\1\65\11\23\66\0\1\66\61\0\1\67"+
    "\6\0\1\70\5\0\1\71\71\0\1\72\66\0\1\73"+
    "\14\0\1\74\4\0\1\75\67\0\1\76\1\77\62\0"+
    "\1\100\14\0\1\101\61\0\1\102\21\0\1\103\64\0"+
    "\1\104\66\0\1\105\3\0\1\106\102\0\1\107\72\0"+
    "\1\110\12\0\1\111\63\0\1\112\27\0\17\113\1\114"+
    "\1\115\4\113\1\0\1\113\1\115\66\113\1\116\1\117"+
    "\4\113\1\0\1\113\1\117\66\113\1\120\1\121\4\113"+
    "\1\0\1\113\1\121\66\113\1\122\1\123\4\113\1\0"+
    "\1\113\1\123\47\113\24\0\1\124\52\0\12\125\1\126"+
    "\64\125\2\57\1\3\1\57\1\4\72\57\16\0\3\62"+
    "\6\0\11\62\2\0\27\62\24\0\3\63\6\0\11\63"+
    "\2\0\27\63\24\0\3\23\6\0\11\23\2\0\15\23"+
    "\1\127\11\23\24\0\3\23\6\0\11\23\2\0\11\23"+
    "\1\130\15\23\66\0\1\131\73\0\1\132\70\0\1\133"+
    "\105\0\1\134\3\0\1\135\57\0\1\136\110\0\1\137"+
    "\76\0\1\140\100\0\1\141\100\0\1\142\101\0\1\143"+
    "\71\0\1\144\102\0\1\145\61\0\1\146\106\0\1\147"+
    "\65\0\1\150\104\0\1\151\104\0\1\152\2\0\1\153"+
    "\71\0\1\154\106\0\1\155\56\0\1\156\111\0\1\157"+
    "\32\0\1\115\76\0\1\117\76\0\1\121\76\0\1\123"+
    "\60\0\12\125\1\160\76\125\1\160\2\125\1\161\61\125"+
    "\16\0\3\23\6\0\11\23\2\0\1\23\1\162\25\23"+
    "\24\0\3\23\6\0\11\23\2\0\3\23\1\163\23\23"+
    "\63\0\1\164\76\0\1\165\66\0\1\166\112\0\1\167"+
    "\60\0\1\170\111\0\1\171\103\0\1\172\61\0\1\165"+
    "\75\0\1\173\113\0\1\174\63\0\1\175\107\0\1\176"+
    "\102\0\1\177\55\0\1\200\102\0\1\201\72\0\1\202"+
    "\116\0\1\203\56\0\1\204\3\0\1\205\107\0\1\206"+
    "\76\0\1\207\102\0\1\210\56\0\1\211\100\0\1\212"+
    "\30\0\12\125\1\160\2\125\1\3\61\125\16\0\3\23"+
    "\6\0\11\23\2\0\13\23\1\213\13\23\24\0\3\23"+
    "\6\0\11\23\2\0\11\23\1\214\15\23\62\0\1\165"+
    "\65\0\1\215\123\0\1\216\51\0\1\217\113\0\1\220"+
    "\71\0\1\221\76\0\1\222\105\0\1\223\76\0\1\224"+
    "\76\0\1\210\14\0\17\113\1\114\1\115\4\113\1\0"+
    "\1\113\1\115\33\113\1\225\13\113\47\0\1\165\111\0"+
    "\1\226\100\0\1\227\74\0\1\230\74\0\1\164\76\0"+
    "\1\231\61\0\1\232\51\0\3\23\6\0\11\23\2\0"+
    "\16\23\1\233\10\23\70\0\1\234\74\0\1\235\75\0"+
    "\1\236\77\0\1\237\74\0\1\240\102\0\1\241\57\0"+
    "\1\242\117\0\1\243\65\0\1\244\102\0\1\245\74\0"+
    "\1\246\67\0\1\247\73\0\1\250\112\0\1\251\103\0"+
    "\1\252\71\0\1\253\72\0\1\254\110\0\1\255\73\0"+
    "\1\256\67\0\1\257\105\0\1\260\74\0\1\261\16\0"+
    "\17\113\1\116\1\117\4\113\1\0\1\113\1\117\17\113"+
    "\1\262\27\113\47\0\1\263\111\0\1\264\14\0\17\113"+
    "\1\120\1\121\4\113\1\0\1\113\1\121\17\113\1\262"+
    "\27\113\47\0\1\265\111\0\1\266\72\0\1\267\51\0"+
    "\1\270\127\0\1\271\50\0\1\272\125\0\1\225\75\0"+
    "\1\172\14\0\17\113\1\122\1\123\4\113\1\0\1\113"+
    "\1\123\33\113\1\225\13\113\61\0\1\273\60\0\1\274"+
    "\65\0\1\275\2\0\1\276\1\277\1\300\112\0\1\301"+
    "\76\0\1\302\105\0\1\303\71\0\1\304\103\0\1\305"+
    "\67\0\1\306\110\0\1\307\60\0\1\310\111\0\1\311"+
    "\100\0\1\312\72\0\1\313\65\0\1\314\115\0\1\315"+
    "\72\0\1\316\73\0\1\317\62\0\1\320\114\0\1\321"+
    "\65\0\1\275\75\0\1\322\106\0\1\321\103\0\1\323"+
    "\75\0\1\165\75\0\1\321\76\0\1\324\57\0\1\325"+
    "\116\0\1\326\13\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[10962];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\1\1\2\11\1\1\3\11\4\1\2\11"+
    "\5\1\2\11\14\1\2\11\4\1\1\0\1\11\1\0"+
    "\1\11\1\0\2\1\1\11\4\1\21\0\1\1\3\0"+
    "\1\11\1\1\1\11\1\1\1\11\1\1\1\11\1\1"+
    "\2\11\2\0\2\1\30\0\3\1\2\11\10\0\1\11"+
    "\1\0\1\11\6\0\1\11\3\0\2\1\3\0\1\11"+
    "\4\0\1\11\5\0\1\1\17\0\1\11\4\0\1\1"+
    "\1\11\1\1\1\0\1\11\1\0\1\11\22\0\1\11"+
    "\7\0\1\11\4\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[214];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    private Token token(String lexeme, String lexicalComp, int line, int column){
        return new Token(lexeme, lexicalComp, line+1, column+1);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public Token yylex() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return token(yytext(), "ERROR", yyline, yycolumn);
            }
          // fall through
          case 44: break;
          case 2:
            { /*Ignorar*/
            }
          // fall through
          case 45: break;
          case 3:
            { return token(yytext(), "OP_LOGICO", yyline, yycolumn);
            }
          // fall through
          case 46: break;
          case 4:
            { return token(yytext(), "NUMERAL", yyline, yycolumn);
            }
          // fall through
          case 47: break;
          case 5:
            { return token(yytext(), "PARENTESIS_A", yyline, yycolumn);
            }
          // fall through
          case 48: break;
          case 6:
            { return token(yytext(), "PARENTESIS_C", yyline, yycolumn);
            }
          // fall through
          case 49: break;
          case 7:
            { return token(yytext(), "COMA", yyline, yycolumn);
            }
          // fall through
          case 50: break;
          case 8:
            { return token(yytext(), "NUMERO", yyline, yycolumn);
            }
          // fall through
          case 51: break;
          case 9:
            { return token(yytext(), "DOS PUNTOS", yyline, yycolumn);
            }
          // fall through
          case 52: break;
          case 10:
            { return token(yytext(), "PUNTO_COMA", yyline, yycolumn);
            }
          // fall through
          case 53: break;
          case 11:
            { return token(yytext(), "ERROR_2", yyline, yycolumn);
            }
          // fall through
          case 54: break;
          case 12:
            { return token(yytext(), "CORCHETE_A", yyline, yycolumn);
            }
          // fall through
          case 55: break;
          case 13:
            { return token(yytext(), "CORCHETE_C", yyline, yycolumn);
            }
          // fall through
          case 56: break;
          case 14:
            { return token(yytext(), "LLAVE_A", yyline, yycolumn);
            }
          // fall through
          case 57: break;
          case 15:
            { return token(yytext(), "LLAVE_C", yyline, yycolumn);
            }
          // fall through
          case 58: break;
          case 16:
            { return token(yytext(), "TEXTO", yyline, yycolumn);
            }
          // fall through
          case 59: break;
          case 17:
            { return token (yytext(), "ASIGNACION_RETORNO", yyline, yycolumn);
            }
          // fall through
          case 60: break;
          case 18:
            { return token(yytext(), "ERROR_1", yyline, yycolumn);
            }
          // fall through
          case 61: break;
          case 19:
            { return token (yytext(), "ASIGNACION", yyline, yycolumn);
            }
          // fall through
          case 62: break;
          case 20:
            { return token(yytext(), "ERROR_3", yyline, yycolumn);
            }
          // fall through
          case 63: break;
          case 21:
            { return token(yytext(), "IDENTIFICADOR", yyline, yycolumn);
            }
          // fall through
          case 64: break;
          case 22:
            { return token(yytext(), "ESTRUCTURA_SI", yyline, yycolumn);
            }
          // fall through
          case 65: break;
          case 23:
            { return token(yytext(), "ERROR_4", yyline, yycolumn);
            }
          // fall through
          case 66: break;
          case 24:
            { return token(yytext(), "PICAS", yyline, yycolumn);
            }
          // fall through
          case 67: break;
          case 25:
            { return token(yytext(), "TREBOLES", yyline, yycolumn);
            }
          // fall through
          case 68: break;
          case 26:
            { return token(yytext(), "CORAZONES", yyline, yycolumn);
            }
          // fall through
          case 69: break;
          case 27:
            { return token(yytext(), "DIAMANTES", yyline, yycolumn);
            }
          // fall through
          case 70: break;
          case 28:
            { return token (yytext(), "ASIGNACION_LAMBDA", yyline, yycolumn);
            }
          // fall through
          case 71: break;
          case 29:
            { return token(yytext(), "TIPO_DATO", yyline, yycolumn);
            }
          // fall through
          case 72: break;
          case 30:
            { return token(yytext(), "MOVIMIENTO", yyline, yycolumn);
            }
          // fall through
          case 73: break;
          case 31:
            { return token(yytext(), "MANO", yyline, yycolumn);
            }
          // fall through
          case 74: break;
          case 32:
            { return token(yytext(), "NADA", yyline, yycolumn);
            }
          // fall through
          case 75: break;
          case 33:
            { return token(yytext(), "FINAL", yyline, yycolumn);
            }
          // fall through
          case 76: break;
          case 34:
            { return token(yytext(), "BOOLEANO", yyline, yycolumn);
            }
          // fall through
          case 77: break;
          case 35:
            { return token(yytext(), "TIPO_CARTA", yyline, yycolumn);
            }
          // fall through
          case 78: break;
          case 36:
            { return token(yytext(), "INICIO", yyline, yycolumn);
            }
          // fall through
          case 79: break;
          case 37:
            { return token(yytext(), "PROCESO", yyline, yycolumn);
            }
          // fall through
          case 80: break;
          case 38:
            { return token(yytext(), "REPETIR", yyline, yycolumn);
            }
          // fall through
          case 81: break;
          case 39:
            { return token(yytext(), "RETORNO", yyline, yycolumn);
            }
          // fall through
          case 82: break;
          case 40:
            { return token(yytext(), "COMPARAR", yyline, yycolumn);
            }
          // fall through
          case 83: break;
          case 41:
            { return token(yytext(), "IMPRIMIR", yyline, yycolumn);
            }
          // fall through
          case 84: break;
          case 42:
            { return token(yytext(), "DETENER", yyline, yycolumn);
            }
          // fall through
          case 85: break;
          case 43:
            { return token(yytext(), "REPARTIR", yyline, yycolumn);
            }
          // fall through
          case 86: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
